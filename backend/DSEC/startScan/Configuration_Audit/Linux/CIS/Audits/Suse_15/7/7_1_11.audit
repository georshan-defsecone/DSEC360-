audit_id: "7.1.11"
audit_name: "Ensure world writable files and directories are secured"
audit_script: """
{
  l_output=""
  l_output2=""
  l_smask='01000'
  a_file=()
  a_dir=()

  # Exclude certain paths from search
  a_path=(
    ! -path "/run/user/*"
    ! -path "/proc/*"
    ! -path "*/containerd/*"
    ! -path "*/kubelet/pods/*"
    ! -path "*/kubelet/plugins/*"
    ! -path "/sys/*"
    ! -path "/snap/*"
  )

  # Scan each mounted filesystem
  while IFS= read -r l_mount; do
    while IFS= read -r -d $'\0' l_file; do
      if [ -e "$l_file" ]; then
        [ -f "$l_file" ] && a_file+=("$l_file") # Add world-writable files
        if [ -d "$l_file" ]; then
          l_mode="$(stat -Lc '%#a' "$l_file")"
          # Add directories missing sticky bit
          [ ! $(( l_mode & l_smask )) -gt 0 ] && a_dir+=("$l_file")
        fi
      fi
    done < <(find "$l_mount" -xdev \( "${a_path[@]}" \) \( -type f -o -type d \) -perm -0002 -print0 2>/dev/null)
  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\/run\/user\/|\/tmp|\/var\/tmp)/) {print $2}')

  # Prepare result for world-writable files
  if [ "${#a_file[@]}" -eq 0 ]; then
    l_output+="\n - No world-writable files exist on the local filesystem."
  else
    l_output2+="\n - Found ${#a_file[@]} world-writable file(s):\n$(printf '%s\n' "${a_file[@]}")\n - End of list.\n"
  fi

  # Prepare result for world-writable dirs without sticky bit
  if [ "${#a_dir[@]}" -eq 0 ]; then
    l_output+="\n - All world-writable directories have the sticky bit set."
  else
    l_output2+="\n - Found ${#a_dir[@]} world-writable directory(ies) without sticky bit:\n$(printf '%s\n' "${a_dir[@]}")\n - End of list.\n"
  fi

  # Cleanup
  unset a_path a_file a_dir

  # Final audit result
  if [ -z "$l_output2" ]; then
    echo -e "\n- Audit Result:\n ** PASS **$l_output"
  else
    echo -e "\n- Audit Result:\n ** FAIL **$l_output2"
    [ -n "$l_output" ] && echo -e "\n - Additional correct configuration:\n$l_output"
  fi
}
""""