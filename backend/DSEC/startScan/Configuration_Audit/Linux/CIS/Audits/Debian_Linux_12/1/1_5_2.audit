audit_id: "1.5.2"
audit_name: "Ensure ptrace_scope is restricted"
audit_script: """
{
#!/bin/bash

a_output=()
a_output2=()
a_parlist=("kernel.yama.ptrace_scope=(1|2|3)")

l_ufwscf="$([ -f /etc/default/ufw ] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"
l_systemdsysctl="$(readlink -f /lib/systemd/systemd-sysctl)"

f_kernel_parameter_chk() {
    # Check running configuration
    l_running_parameter_value="$(sysctl "$l_parameter_name" | awk -F= '{print $2}' | xargs)"
    
    if grep -Pq -- '\b'"$l_parameter_value"'\b' <<< "$l_running_parameter_value"; then
        a_output+=(" - \"$l_parameter_name\" is correctly set to \"$l_running_parameter_value\" in the running configuration")
    else
        a_output2+=(" - \"$l_parameter_name\" is incorrectly set to \"$l_running_parameter_value\" in the running configuration"
                    " and should have a value of: \"$l_value_out\"")
    fi

    # Check durable setting (files)
    unset A_out
    declare -A A_out

    while read -r l_out; do
        if [ -n "$l_out" ]; then
            if [[ $l_out =~ ^\s*# ]]; then
                l_file="${l_out//# /}"
            else
                l_kpar="$(awk -F= '{print $1}' <<< "$l_out" | xargs)"
                [ "$l_kpar" = "$l_parameter_name" ] && A_out["$l_kpar"]="$l_file"
            fi
        fi
    done < <("$l_systemdsysctl" --cat-config | grep -Po '^\h*([^#\n\r]+|#\h*/[^#\n\r\h]+\.conf\b)')

    # Account for systems with UFW (not covered by systemd-sysctl --cat-config)
    if [ -n "$l_ufwscf" ]; then
        l_kpar="$(grep -Po "^\h*$l_parameter_name\b" "$l_ufwscf" | xargs)"
        l_kpar="${l_kpar//\//.}"
        [ "$l_kpar" = "$l_parameter_name" ] && A_out["$l_kpar"]="$l_ufwscf"
    fi

    # Assess output from files and generate output
    if (( ${#A_out[@]} > 0 )); then
        while IFS="=" read -r l_fkpname l_file_parameter_value; do
            l_fkpname="${l_fkpname// /}"
            l_file_parameter_value="${l_file_parameter_value// /}"
            
            if grep -Pq -- '\b'"$l_parameter_value"'\b' <<< "$l_file_parameter_value"; then
                a_output+=(" - \"$l_parameter_name\" is correctly set to \"$l_file_parameter_value\" in \"$(printf '%s' "${A_out[@]}")\"")
            else
                a_output2+=(" - \"$l_parameter_name\" is incorrectly set to \"$l_file_parameter_value\" in \"$(printf '%s' "${A_out[@]}")\""
                            " and should have a value of: \"$l_value_out\"")
            fi
        done < <(grep -Po -- "^\h*$l_parameter_name\h*=\h*\H+" "${A_out[@]}")
    else
        a_output2+=(" - \"$l_parameter_name\" is not set in an included file"
                    " ** Note: \"$l_parameter_name\" may be set in a file that's ignored by load procedure **")
    fi
}

# Process each kernel parameter
while IFS="=" read -r l_parameter_name l_parameter_value; do
    l_parameter_name="${l_parameter_name// /}"
    l_parameter_value="${l_parameter_value// /}"

    l_value_out="${l_parameter_value//-/ through }"
    l_value_out="${l_value_out//|/ or }"
    l_value_out="$(tr -d '(){}' <<< "$l_value_out")"

    f_kernel_parameter_chk
done < <(printf '%s\n' "${a_parlist[@]}")

# Output results
if [ "${#a_output2[@]}" -le 0 ]; then
    printf '%s\n' "" "- Audit Result:" " ** PASS **" "${a_output[@]}" ""
else
    printf '%s\n' "" "- Audit Result:" " ** FAIL **" " - Reason(s) for audit failure:" "${a_output2[@]}"
    if [ "${#a_output[@]}" -gt 0 ]; then
        printf '%s\n' "" "- Correctly set:" "${a_output[@]}" ""
    fi
fi 
}
"""