Name,Description,Settings,Remediation
1.2 Use Dedicated Least Privileged Account for MariaDB Daemon/Service (Automated),"As with any service installed on a host, it can be provided with its own user context. Providing a dedicated user to the service provides the ability to precisely constrain the service within the larger host context.",startswith:VARIABLE_VALUE:mysql  ,"/usr/sbin/groupadd -g 27 -o -r mysql >/dev/null 2>&1 || : 
/usr/sbin/useradd -M -N -g mysql -o -r -d /var/lib/mysql -s /bin/false \ -c ""MariaDB Server"" -u 27 mysql >/dev/null 2"
1.3 Disable MariaDB Command History (Automated) ,"On Unix, the mysql client writes a record of executed statements to a history file. By default, this file is named .mysql_history and is created in your home directory. To specify a different file, set the value of the MYSQL_HISTFILE environment variable. The .mysql_history file should be protected with a restrictive access mode because sensitive information might be written to it, such as the text of SQL statements that contain passwords.",equals:VARIABLE_VALUE:PASS, ln -s /dev/null $HOME/.mysql_history
1.4 Verify That the MYSQL_PWD Environment Variable is Not in Use (Automated),MariaDB can read a default database password from an environment variable called MYSQL_PWD. Avoiding use of this environment variable can better safeguard the confidentiality of MariaDB credentials.,equals:VARIABLE_VALUE:,"Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method. For unattended logins, you should consider 2) Different authentication methods (e.g., X509 certificate verification)"
1.5 Ensure Interactive Login is Disabled (Automated),"When created, the MariaDB user may have interactive access to the operating system, which means that the MariaDB user could login to the host as any other user would.",endswith:VARIABLE_VALUE:/bin/false || endswith:VARIABLE_VALUE:/sbin/nologin ,Execute one of the following commands in a terminal: usermod -s /bin/false mysql Or usermod -s /sbin/nologin mysql
1.6 Verify That 'MYSQL_PWD' is Not Set in Users' Profiles (Automated),MariaDB can read a default database password from an environment variable called MYSQL_PWD.,endswith:VARIABLE_VALUE:No such file or directory || equals:VARIABLE_VALUE:,Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method.
2.1.5 Point-in-Time Recovery (Automated),With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time. Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.,greaterthan:VARIABLE_VALUE:0,"Enable binlogs, then create and test a restore procedure."
2.9 Ensure MariaDB is Bound to an IP Address (Automated),"By default, the MariaDB server accepts TCP/IP connections from MariaDB user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.",notequals:VARIABLE_VALUE: && notequals:VARIABLE_VALUE:*  &&  notequals:VARIABLE_VALUE:::,"For example, to have the MariaDB server only accept connections on a specific IPv4 address, add an entry similar to this under the [mysqld] option group in MariaDB configuration files: bind_address=192.0.2.24 This setting typically appears in /etc/mysql/mariadb.conf.d/50-server.cnf. In the case above, clients can connect to the server using --host=192.0.2.24. Connections on other server host addresses are not permitted."
2.10 Limit Accepted Transport Layer Security (TLS) Versions (Automated),MariaDB supports multiple versions of TLS. The higher the version the stronger the security and/or better the performance.,notcontains:value:TLSv1 && notcontains:value: TLSv1.1,"Set the version(s) of TLS you wish to accept by setting the tls_version option to a 
comma-separated (no whitespace) string in MariaDB configuration files. 
For example, to only accept TLS 1.2 or 1.3 connections, set tls_version likeso: 
tls_version=TLSv1.2,TLSv1.3 
Note: with this setting, only clients that support the specified TLS version(s) are able to 
establish an encrypted connection to the server. "
2.11 Require Client-Side Certificates (X.509) (Automated),Client-side certificates may be used as proof of identity.,check_all:ssl_type:X509,"Create or Alter users using the REQUIRE X509. 
For example: 
CREATE USER 'newuser2'@'%' IDENTIFIED BY <password> require x509; 
For accounts created with a REQUIRE X509 clause, clients must specify at least --ssl
cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath) is recommended so that 
the public certificate provided by the server can be verified. 
For example: 
mysql --ssl-ca=ca.pem \ --ssl-cert=client-cert.pem \ --ssl-key=client-key.pem"
2.12 Ensure Only Approved Ciphers are Used (Automated),"MariaDB supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.",notequals:VARIABLE_VALUE: ,"Set ssl_cipher to one or more approved cipher suites in your MariaDB configuration 
file, then restart MariaDB. 
For example, set: 
ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256'"
3.1 Ensure 'datadir' Has Appropriate Permissions (Automated),The data directory is the location of the MariaDB databases.,notequals:VARIBALE_VALUE:,"chmod 750 <datadir> 
chown mysql:mysql <datadir> "
3.2 Ensure 'log_bin_basename' Files Have Appropriate Permissions (Automated),"MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users.",equals:VARIABLE_VALUE: || endswith:VARIABLE_VALUE:No such file or directory,"chmod 660 <log file> 
chown mysql:mysql <log file> "
3.3 Ensure 'log_error' Has Appropriate Permissions (Automated),"MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users. Much of the information about the state of MariaDB exists in MariaDB, the MariaDB performance_schema or informations_schema. In cases where the information you need is within a running MariaDB, use these methods as they are more secure as they do not require OS login and access.",notequals:VARIABLE_VALUE:,"chmod 600 <log file> 
chown mysql:mysql <log file>"
3.4 Ensure 'slow_query_log' Has Appropriate Permissions (Automated),"MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users. Much of the information about the state of MariaDB exists in MariaDB, the MariaDB performance_schema or informations_schema. If you can get the information you need from within MariaDB that is more secure as it does not require OS access. If you are not going to use log files it is best to first disable (don’t enable) and remove any prior logs.",equals:VARIABLE_VALUE:it is not enabled  || equals:VARIABLE_VALUE:,"chmod 660 <log file> 
chown mysql:mysql <log file> "
3.5 Ensure 'relay_log_basename' Files Have Appropriate Permissions (Automated),"MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log (which can be encrypted), general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users.",equals:VARIABLE_VALUE: || endswith:VARIABLE_VALUE: No such file or directory,"chmod 660 <log file> 
chown mysql:mysql <log file> "
3.8 Ensure Plugin Directory Has Appropriate Permissions (Automated),The plugin directory is the location of the MariaDB plugins. Plugins are storage engines or user defined functions (UDFs).,notequals:VARIABLE_VALUE:,"chmod 550 <plugin_dir Value> 
chown mysql:mysql <plugin_dir Value>"
4.3 Ensure 'allow-suspicious-udfs' is Set to 'OFF' (Automated),"This option prevents attaching arbitrary shared library functions as user-defined functions by checking for at least one corresponding method named _init, _deinit, _reset, _clear, or _add.",equals:VARIABLE_VALUE:,"Perform the following to establish the recommended state: 
• Remove --allow-suspicious-udfs from the mariadbd start up command line. 
• Remove allow-suspicious-udfs from the MariaDB option file."
4.4 Harden Usage for 'local_infile' on MariaDB Clients (Automated),The local_infile parameter dictates whether files located on the MariaDB client's computer can be loaded or selected via LOAD DATA INFILE or SELECT local_file.,LOCAL_INFILE:,"Upgrade all MariaDB clients and connectors to 10.2.0 or higher. 
In the case where using local_infile is needed, the following changes further harden 
security: 
On client side, secure by: 
Limiting the location from where data can be read using --load-data-local-dir. 
mariadb --local-infile=0 --load-data-local-dir=/my/local/data 
Adding TLS connection to assure server identity by requiring verification. 
mariadb --local-infile=0 --load-data-local-dir=/my/local/data --ssl
mode=VERIFY_IDENTITY 
If local_infile is not in use or if clients are not upgraded - add the following line to the 
[mariadbd] section of the MySQL configuration file and restart the MariaDB service: 
local-infile=0"
4.6 Ensure Symbolic Links are Disabled (Automated),"The symbolic-links and skip-symbolic-links options for MariaDB determine whether symbolic link support is available. When use of symbolic links is enabled, they have different effects depending on the host platform. When symbolic links are disabled, then symbolic links stored in files or entries in tables are not used by the database.",equals:VARIABLE_VALUE:DISABLED,"Perform the following actions to remediate this setting: 
• Open the MariaDB configuration file (mariadb.cnf) 
• Locate skip-symbolic-links in the configuration 
• Set the skip-symbolic-links to YES 
Note: If skip-symbolic-links does not exist, add it to the configuration file in the 
mariadbd section"
4.7 Ensure the 'secure_file_priv' is Configured Correctly (Automated),"The secure_file_priv option restricts to paths used by LOAD DATA INFILE or SELECT local_file. It is recommended that this option be set to a file system location that contains only resources expected to be loaded by MariaDB. Even better, if data import/export using LOAD DATA INFILE or SELECT local_file is not used, the functionality should be disabled entirely by setting --secure-file-priv to NULL.",equals:VARIABLE_VALUE:NULL,"If you are not going to use this feature, remove secure_file_priv from the [mariadbd] 
section of the MariaDB configuration file and restart the MariaDB service. 
If you need this feature add the following line to the [mariadbd] section of the MariaDB 
configuration file and restart the MariaDB service: 
secure_file_priv=<path_to_load_directory> "
4.8 Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES' (Automated),"When data changing statements are made (i.e., INSERT, UPDATE), MariaDB can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise ""adjusted"" to make the data changing statement work.",contains:VARIABLE_VALUE:STRICT_ALL_TABLES,"Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example: 
SET GLOBAL sql_mode 
='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO
 _ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';"
4.9 Enable data-at-rest encryption in MariaDB (Automated),"Data-at-rest encryption protects the privacy of your information, prevents data breaches and helps meet regulatory requirements.",ENCRYPTION:,"MariaDB's data-at-rest encryption requires the use of a key management and 
encryption plugin. 
Create the key file: 
$ sudo mkdir -p /etc/mysql/encryption && (echo -n ""1;"" ; openssl rand -hex 32 
) | sudo tee -a  /etc/mysql/encryption/keyfile 
Generate a random encryption password:  
$ sudo openssl rand -hex 128 | sudo tee -a /etc/mysql/encryption/keyfile.key 
Encrypt the key file: 
$ sudo openssl enc -aes-256-cbc -md sha1 \ 
   -pass file:/etc/mysql/encryption/keyfile.key \ 
   -in /etc/mysql/encryption/keyfile \ 
   -out /etc/mysql/encryption/keyfile.enc 
Delete the unencrypted key file: 
$ sudo rm /etc/mysql/encryption/keyfile 
Set permissions and ownership on the keyfile and key: 
$ sudo chown mysql:mysql -R /etc/mysql/encryption 
$ sudo chmod 640 /etc/mysql/encryption/keyfile* 
Edit mariadb.cnf to resemble the following block, optionally uncommenting 
file_key_management_encryption_algorithm = AES_CTR: 
[mariadb] 
... 
plugin_load_add = file_key_management 
file_key_management_filename = /etc/mysql/encryption/keyfile.enc 
file_key_management_filekey = FILE:/etc/mysql/encryption/keyfile.key 
 
# Binary Log Encryption 
encrypt_binlog = ON 
# Redo Log Encryption 
innodb_encrypt_log = ON 
# Encrypting Temporary Files 
encrypt_tmp_files = ON 
# Encrypt Temporary Tables 
innodb_encrypt_temporary_tables = ON 
 
# You can configure InnoDB encryption to automatically have all new InnoDB 
tables automatically encrypted, or specify encrypt per table. 
innodb_encrypt_tables = ON 
 
# Uncomment the line below if utilizing MariaDB built with OpenSSL 
# file_key_management_encryption_algorithm = AES_CTR  
If needed, see References for information about 
file_key_management_encryption_algorithm and OpenSSL usage. 
Restart MariaDB: 
$ sudo systemctl restart mariadb.service 
Run ALTER to enable encryption (Note: This will lock the table as table is encrypted). 
ALTER TABLE tab1 
   ENCRYPTED=YES ENCRYPTION_KEY_ID=1; 
Revisit recommendation 3.10 after completing remediation."
6.1 Ensure 'log_error' is configured correctly (Automated),"The error log contains information about events such as mariadbd starting and stopping, when a table needs to be checked or repaired, and, depending on the host operating system, stack traces when mariadbd fails.",notequals: VARIABLE_VALUE:./stderr.err.,"Perform the following actions to remediate this setting: 
1. Open the MariaDB configuration file (mariadb.cnf). 
2. Set the log_error option to the path for the error log. "
6.2 Ensure Log Files are Stored on a Non-System Partition (Automated),"MariaDB log files can be set in the MariaDB configuration to exist anywhere on the filesystem. It is common practice to ensure that the system filesystem is left uncluttered by application logs. System filesystems include the root (/), /var, or /usr.",notstartswith:value:/var && notstartswith:value:/usr,"Perform the following actions to remediate this setting: 
1. Open the MariaDB configuration file (mariadb.cnf) 
2. Locate the log_bin entry and set it to a file not on root (/), /var, or /usr"
6.3 Ensure 'log_warnings' is Set to '2' (Automated),"The log_warnings system variable, set to 2 by default, specifies the verbosity of events sent to the MariaDB error log. A value of 2 enables logging of error and warning messages, a value of 3 also includes informational logging, a value of 1 logs only errors.",equals:VARIABLE_VALUE:2,"Perform the following actions to remediate this setting: 
• Open the MySQL configuration file (mariadb.cnf) 
• Ensure the following line is found in the mariadbd section 
log_warnings = 2"
6.4 Ensure Audit Logging Is Enabled (Automated),"Enabling audit logging is an important consideration for a production environment, and 
MariaDB plugin exist to help with this. Enable audit logging for 
• Connect events 
• Query and Table events (optional) ","randomcheck:SERVER_AUDIT_LOGGING,SERVER_AUDIT_EVENTS:ON,CONNECT","[mariadb] 
... 
#MariaDB plugin 
plugin_load_add = server_audit 
server_audit_logging=ON 
server_audit_events=CONNECT "
6.5 Ensure the Audit Plugin Can't be Unloaded (Automated),Set server_audit to FORCE_PLUS_PERMANENT,equals:LOAD_OPTION:FORCE_PLUS_PERMANENT ,"To remediate this setting, follow these steps: 
1. Open the MariaDB configuration file (mariadb.cnf) 
2. Ensure the following line is found in the mariadbd section 
server_audit=FORCE_PLUS_PERMANENT "
6.6 Ensure Binary and Relay Logs are Encrypted (Automated),The encrypt_binlog system variable may be used to configure encryption of the binary and relay logs. This may be configured to ON even if binary logging is not enabled in order to encrypt relay log files.,equals:VARIABLE_VALUE:ON,"[mariadb] 
... 
# Binary Log Encryption 
encrypt_binlog=ON"
7.1 Disable use of the mysql_old_password plugin (Automated),"The mysql_old_password plugin uses a cracked password routine with several flaws. It is present but not used by default in MariaDB. Steps should be taken to ensure that passwords will not be created with this plugin and that clients will not be able to authenticate to the MariaDB server using this plugin. The old_passwords system variable controls whether MariaDB server uses the mysql_old_password plugin (instead of the stronger mysql_native_password plugin) when creating passwords. The secure_auth system variable, when enabled, will block client connections that utilize the mysql_old_password plugin.","randomcheck:OLD_PASSWORDS,SECURE_AUTH:OFF,ON","If old_passwords was ON, add the following line to the [mariadbd] section in 
mariadb.cnf: 
old_passwords=0 
If 'secure_authwasOFF, add the following line to the [mariadbd]section 
inmariadb.cnf`: 
secure_auth=ON 
Restart MariaDB. "
7.3 Ensure strong authentication is utilized for all accounts (Automated),"The mysql_native_password and mysql_old_password plugins utilize weak cryptography and/or weak password routines. In particular, the mysql_old_password plugin utilizes cracked password routines and is subject to Pass-the-Hash attacks. The mysql_native_password plugin relies on the Secure Hash Algorithm 1 (SHA-1) algorithm. The National Institute of Standards and Technology (NIST) recommends against use of SHA-1. Additionally, these plugins allow users to set blank passwords, which allow authentication without providing a password. All users should be using alternative, stronger plugins or be configured with invalid passwords. See Default Value section and References for more details on specific account configurations.",equals:,"If the root user is returned in the audit procedure results, set that account to utilize only 
the unix_socket plugin by running the following mariadb command: 
alter user 'root'@'localhost' identified via 'unix_socket'; 
If the mysql user is returned in the audit procedure results, set that account to use an 
invalid password by running the following mariadb command: 
set password for 'mysql'@'localhost' = 'invalid'; 
If the mariadb.sys user is returned in the audit procedure results, set that account to 
use an invalid password by running the following mariadb command: 
set password for 'mariadb.sys'@'localhost' = 'invalid'; 
For every other user identified by the audit procedure, use the ALTER USER command to 
configure the account to utilize one of the following authentication plugins as 
appropriate: 
• ed25519 
• gssapi 
• pam 
• unix_socket 
Notes: 
Some of these plugins will require installation if not already in use. Changing a user to 
utilize the ed25519 plugin but without providing a password will make the account 
inaccessible. For service accounts, set a new password in MariaDB and where the 
service account is used. For human user accounts, set a temporary password and notify 
the user to change the password immediately. 
If password validation plugins are already implemented, strict_password_validation 
may need to be temporarily disabled to reset mysql and mariadb.sys accounts to use 
invalid passwords. To do so, run set global strict_password_validation=0; before 
and set global strict_password_validation=1; after the set password commands."
7.4 Ensure Password Complexity Policies are in Place (Automated),"Passwords should be configured with a minimum length of 14 characters and should be checked against dictionaries of common, known, and expected passwords.",PASSWORD:,"Install the password check plugins: 
INSTALL SONAME 'simple_password_check'; 
INSTALL SONAME 'cracklib_password_check'; 
Note A supporting linux distribution package may need to be installed before installing 
the cracklib plugin. Follow installation guidance on the Cracklib Password Check Plugin 
page in the References section. 
Add the following lines to MariaDB configuration files: 
plugin_load_add = simple_password_check 
simple_password_check = FORCE_PLUS_PERMANENT 
simple_password_check_minimal_length = 14 
plugin_load_add = cracklib_password_check 
cracklib_password_check = FORCE_PLUS_PERMANENT 
strict_password_validation = ON 
Consider customizing the password dictionary to include usernames of all MariaDB 
users and any other risky passwords patterns noted in the Audit Procedure. 
Set cracklib_password_check_dictionary if using a customized password dictionary."
7.5 Ensure No Users Have Wildcard Hostnames (Automated),"MariaDB can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to ''@'%'.",equals:,"Perform the following actions to remediate this setting: 
1. Enumerate all users returned after running the audit procedure. 
2. Either ALTER the user's host to be specific or DROP the user."
7.6 Ensure No Anonymous Accounts Exist (Automated),"Anonymous accounts are users with empty usernames (''). Anonymous accounts have no passwords, so anyone can use them to connect to the MariaDB server.",equals:,"Perform the following actions to remediate this setting: 
1. Enumerate the anonymous users returned from executing the audit procedure. 
2. For each anonymous user, DROP or assign them a name. 
Note: As an alternative, you may execute the mariadb-secure-installation utility."
8.1 Ensure 'require_secure_transport' is Set to 'ON' and 'have_ssl' is Set to 'YES' (Automated),All network traffic must use SSL/TLS when traveling over untrusted networks.,"randomcheck:REQUIRE_SECURE_TRANSPORT,HAVE_SSL:ON,YES",require_secure_transport=ON;
"8.2 Ensure 'ssl_type' is Set to 'ANY', 'X509', or 'SPECIFIED' for All Remote Users (Automated)",All network traffic must use SSL/TLS when traveling over untrusted networks. SSL/TLS should be enforced on a per-user basis for users which enter the system through the network.,equals:ssl_type:ANY || equals:ssl_type:X509 || equals:ssl_type:SPECIFIED,"Use the ALTER USER statement to require the use of SSL/TLS: 
ALTER USER 'my_user'@'app1.example.com' REQUIRE SSL; 
Note: REQUIRE SSL only enforces TLS. There are additional options REQUIRE X509, 
REQUIRE ISSUER, REQUIRE SUBJECT and REQUIRE CIPHER which can be used to further 
restrict the connection."
