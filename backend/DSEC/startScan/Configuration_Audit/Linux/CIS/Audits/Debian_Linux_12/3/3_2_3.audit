audit_id: "3.2.3"
audit_name: "Ensure rds kernel module is not available"
audit_script: """
{
  # Initialize arrays and variables
  a_output=()
  a_output2=()
  a_output3=()
  l_dl=""
  l_mod_name="rds"
  l_mod_type="net"

  # Get full path to module directory
  l_mod_path="$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)"

  # Function to check module configuration and status
  f_module_chk() {
    l_dl="y"
    a_showconfig=()

    # Collect modprobe configuration lines for this module
    while IFS= read -r l_showconfig; do
      a_showconfig+=("$l_showconfig")
    done < <(modprobe --showconfig | grep -P -- '\b(install|blacklist)\h+' "${l_mod_chk_name//-/_}"'\b')

    # Check if module is currently loaded
    if ! lsmod | grep -q "$l_mod_chk_name"; then
      a_output+=(" - kernel module: \"$l_mod_name\" is not loaded")
    else
      a_output2+=(" - kernel module: \"$l_mod_name\" is loaded")
    fi

    # Check if module is configured to not be loadable (via /bin/true or /bin/false)
    if grep -Pq -- '\binstall\h+'"${l_mod_chk_name//-/_}"'\h+(\/usr)?\/bin\/(true|false)\b' <<< "${a_showconfig[*]}"; then
      a_output+=(" - kernel module: \"$l_mod_name\" is not loadable")
    else
      a_output2+=(" - kernel module: \"$l_mod_name\" is loadable")
    fi

    # Check if the module is blacklisted
    if grep -Pq -- '\bblacklist\h+'"${l_mod_chk_name//-/_}"'\b' <<< "${a_showconfig[*]}"; then
      a_output+=(" - kernel module: \"$l_mod_name\" is deny listed")
    else
      a_output2+=(" - kernel module: \"$l_mod_name\" is not deny listed")
    fi
  }

  # Iterate through each kernel module path and verify presence
  for l_mod_base_directory in $l_mod_path; do
    mod_dir="$l_mod_base_directory/${l_mod_name//-//}"

    if [ -d "$mod_dir" ] && [ -n "$(ls -A "$mod_dir")" ]; then
      a_output3+=(" - \"$l_mod_base_directory\"")
      l_mod_chk_name="$l_mod_name"

      # Optional adjustment for overlay module naming
      [[ "$l_mod_name" =~ overlay ]] && l_mod_chk_name="${l_mod_name::-2}"

      [ "$l_dl" != "y" ] && f_module_chk
    else
      a_output+=(" - kernel module: \"$l_mod_name\" doesn't exist in \"$l_mod_base_directory\"")
    fi
  done

  # Print module existence info
  if [ "${#a_output3[@]}" -gt 0 ]; then
    printf '%s\n' "" " -- INFO --" " - module: \"$l_mod_name\" exists in:" "${a_output3[@]}"
  fi

  # Print audit result
  if [ "${#a_output2[@]}" -le 0 ]; then
    printf '%s\n' "" "- Audit Result:" " ** PASS **" "${a_output[@]}"
  else
    printf '%s\n' "" "- Audit Result:" " ** FAIL **" " - Reason(s) for audit failure:" "${a_output2[@]}"
    if [ "${#a_output[@]}" -gt 0 ]; then
      printf '%s\n' "- Correctly set:" "${a_output[@]}"
    fi
  fi
}
"""