CIS.NO,Subject,Description,Current Setting,Status,Remediation
2.1.5,Point-in-Time Recovery,With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time. Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.,"[{'VARIABLE_NAME': 'BINLOG_EXPIRE_LOGS_SECONDS', 'VARIABLE_VALUE': '0', 'Note': 'BINLOG - Log Expiration'}]",FAIL,"Enable binlogs, then create and test a restore procedure."
2.9,Ensure MariaDB is Bound to an IP Address,"By default, the MariaDB server accepts TCP/IP connections from MariaDB user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.","[{'VARIABLE_NAME': 'BIND_ADDRESS', 'VARIABLE_VALUE': '0.0.0.0'}]",PASS,
2.10,Limit Accepted Transport Layer Security Versions,MariaDB supports multiple versions of TLS. The higher the version the stronger the security and/or better the performance.,"[{'value': 'TLSv1.2,TLSv1.3'}]",PASS,
2.11,Require Client-Side Certificates,Client-side certificates may be used as proof of identity.,"[{'user': '', 'host': 'localhost', 'ssl_type': ''}, {'user': '', 'host': 'linux-vm', 'ssl_type': ''}, {'user': 'admin', 'host': 'localhost', 'ssl_type': ''}, {'user': 'rohinth', 'host': '%', 'ssl_type': ''}]",FAIL,"Create or Alter users using the REQUIRE X509. 
For example: 
CREATE USER 'newuser2'@'%' IDENTIFIED BY <password> require x509; 
For accounts created with a REQUIRE X509 clause, clients must specify at least --ssl
cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath) is recommended so that 
the public certificate provided by the server can be verified. 
For example: 
mysql --ssl-ca=ca.pem \ --ssl-cert=client-cert.pem \ --ssl-key=client-key.pem"
2.12,Ensure Only Approved Ciphers are Used,"MariaDB supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.","[{'VARIABLE_NAME': 'SSL_CIPHER', 'VARIABLE_VALUE': ''}]",FAIL,"Set ssl_cipher to one or more approved cipher suites in your MariaDB configuration 
file, then restart MariaDB. 
For example, set: 
ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256'"
4.4,Harden Usage for 'local_infile' on MariaDB Clients,The local_infile parameter dictates whether files located on the MariaDB client's computer can be loaded or selected via LOAD DATA INFILE or SELECT local_file.,"[{'VARIABLE_NAME': 'VERSION', 'VARIABLE_VALUE': '10.6.22-MariaDB-log'}, {'VARIABLE_NAME': 'LOCAL_INFILE', 'VARIABLE_VALUE': 'ON'}]",PASS,
4.6,Ensure Symbolic Links are Disabled,"The symbolic-links and skip-symbolic-links options for MariaDB determine whether symbolic link support is available. When use of symbolic links is enabled, they have different effects depending on the host platform. When symbolic links are disabled, then symbolic links stored in files or entries in tables are not used by the database.","[{'VARIABLE_NAME': 'HAVE_SYMLINK', 'VARIABLE_VALUE': 'YES'}]",FAIL,"Perform the following actions to remediate this setting: 
• Open the MariaDB configuration file (mariadb.cnf) 
• Locate skip-symbolic-links in the configuration 
• Set the skip-symbolic-links to YES 
Note: If skip-symbolic-links does not exist, add it to the configuration file in the 
mariadbd section"
4.7,Ensure the 'secure_file_priv' is Configured Correctly,"The secure_file_priv option restricts to paths used by LOAD DATA INFILE or SELECT local_file. It is recommended that this option be set to a file system location that contains only resources expected to be loaded by MariaDB. Even better, if data import/export using LOAD DATA INFILE or SELECT local_file is not used, the functionality should be disabled entirely by setting --secure-file-priv to NULL.","[{'VARIABLE_NAME': 'SECURE_FILE_PRIV', 'VARIABLE_VALUE': ''}]",FAIL,"If you are not going to use this feature, remove secure_file_priv from the [mariadbd] 
section of the MariaDB configuration file and restart the MariaDB service. 
If you need this feature add the following line to the [mariadbd] section of the MariaDB 
configuration file and restart the MariaDB service: 
secure_file_priv=<path_to_load_directory> "
4.8,Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES',"When data changing statements are made (i.e., INSERT, UPDATE), MariaDB can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise ""adjusted"" to make the data changing statement work.","[{'VARIABLE_NAME': 'SQL_MODE', 'VARIABLE_VALUE': 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'}]",FAIL,"Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example: 
SET GLOBAL sql_mode 
='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO
 _ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';"
4.9,Enable data-at-rest encryption in MariaDB,"Data-at-rest encryption protects the privacy of your information, prevents data breaches and helps meet regulatory requirements.","[{'VARIABLE_NAME': 'INNODB_ENCRYPT_TEMPORARY_TABLES', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'INNODB_ENCRYPTION_THREADS', 'VARIABLE_VALUE': '0'}, {'VARIABLE_NAME': 'INNODB_ENCRYPT_LOG', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'INNODB_ENCRYPTION_ROTATION_IOPS', 'VARIABLE_VALUE': '100'}, {'VARIABLE_NAME': 'INNODB_DEFAULT_ENCRYPTION_KEY_ID', 'VARIABLE_VALUE': '1'}, {'VARIABLE_NAME': 'ENCRYPT_TMP_FILES', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'INNODB_ENCRYPT_TABLES', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'ENCRYPT_BINLOG', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'INNODB_ENCRYPTION_ROTATE_KEY_AGE', 'VARIABLE_VALUE': '1'}, {'VARIABLE_NAME': 'ARIA_ENCRYPT_TABLES', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'ENCRYPT_TMP_DISK_TABLES', 'VARIABLE_VALUE': 'OFF'}]",FAIL,"MariaDB's data-at-rest encryption requires the use of a key management and 
encryption plugin. 
Create the key file: 
$ sudo mkdir -p /etc/mysql/encryption && (echo -n ""1;"" ; openssl rand -hex 32 
) | sudo tee -a  /etc/mysql/encryption/keyfile 
Generate a random encryption password:  
$ sudo openssl rand -hex 128 | sudo tee -a /etc/mysql/encryption/keyfile.key 
Encrypt the key file: 
$ sudo openssl enc -aes-256-cbc -md sha1 \ 
   -pass file:/etc/mysql/encryption/keyfile.key \ 
   -in /etc/mysql/encryption/keyfile \ 
   -out /etc/mysql/encryption/keyfile.enc 
Delete the unencrypted key file: 
$ sudo rm /etc/mysql/encryption/keyfile 
Set permissions and ownership on the keyfile and key: 
$ sudo chown mysql:mysql -R /etc/mysql/encryption 
$ sudo chmod 640 /etc/mysql/encryption/keyfile* 
Edit mariadb.cnf to resemble the following block, optionally uncommenting 
file_key_management_encryption_algorithm = AES_CTR: 
[mariadb] 
... 
plugin_load_add = file_key_management 
file_key_management_filename = /etc/mysql/encryption/keyfile.enc 
file_key_management_filekey = FILE:/etc/mysql/encryption/keyfile.key 
 
# Binary Log Encryption 
encrypt_binlog = ON 
# Redo Log Encryption 
innodb_encrypt_log = ON 
# Encrypting Temporary Files 
encrypt_tmp_files = ON 
# Encrypt Temporary Tables 
innodb_encrypt_temporary_tables = ON 
 
# You can configure InnoDB encryption to automatically have all new InnoDB 
tables automatically encrypted, or specify encrypt per table. 
innodb_encrypt_tables = ON 
 
# Uncomment the line below if utilizing MariaDB built with OpenSSL 
# file_key_management_encryption_algorithm = AES_CTR  
If needed, see References for information about 
file_key_management_encryption_algorithm and OpenSSL usage. 
Restart MariaDB: 
$ sudo systemctl restart mariadb.service 
Run ALTER to enable encryption (Note: This will lock the table as table is encrypted). 
ALTER TABLE tab1 
   ENCRYPTED=YES ENCRYPTION_KEY_ID=1; 
Revisit recommendation 3.10 after completing remediation."
6.1,Ensure 'log_error' is configured correctly,"The error log contains information about events such as mariadbd starting and stopping, when a table needs to be checked or repaired, and, depending on the host operating system, stack traces when mariadbd fails.","[{'VARIABLE_NAME': 'LOG_ERROR', 'VARIABLE_VALUE': '/var/log/mysql/mariadb.err'}]",PASS,
6.2,Ensure Log Files are Stored on a Non-System Partition,"MariaDB log files can be set in the MariaDB configuration to exist anywhere on the filesystem. It is common practice to ensure that the system filesystem is left uncluttered by application logs. System filesystems include the root (/), /var, or /usr.",[{'value': '/usr/local/mariadb/data/mariadb-bin'}],FAIL,"Perform the following actions to remediate this setting: 
1. Open the MariaDB configuration file (mariadb.cnf) 
2. Locate the log_bin entry and set it to a file not on root (/), /var, or /usr"
6.3,Ensure 'log_warnings' is Set to '2',"The log_warnings system variable, set to 2 by default, specifies the verbosity of events sent to the MariaDB error log. A value of 2 enables logging of error and warning messages, a value of 3 also includes informational logging, a value of 1 logs only errors.","[{'VARIABLE_NAME': 'LOG_WARNINGS', 'VARIABLE_VALUE': '2'}]",PASS,
6.4,Ensure Audit Logging Is Enabled,"Enabling audit logging is an important consideration for a production environment, and 
MariaDB plugin exist to help with this. Enable audit logging for 
• Connect events 
• Query and Table events (optional) ","[{'VARIABLE_NAME': 'LOG_WARNINGS', 'VARIABLE_VALUE': '2'}]",FAIL,"[mariadb] 
... 
#MariaDB plugin 
plugin_load_add = server_audit 
server_audit_logging=ON 
server_audit_events=CONNECT "
6.5,Ensure the Audit Plugin Can't be Unloaded,Set server_audit to FORCE_PLUS_PERMANENT,"[{'VARIABLE_NAME': 'LOG_WARNINGS', 'VARIABLE_VALUE': '2'}]",FAIL,"To remediate this setting, follow these steps: 
1. Open the MariaDB configuration file (mariadb.cnf) 
2. Ensure the following line is found in the mariadbd section 
server_audit=FORCE_PLUS_PERMANENT "
6.6,Ensure Binary and Relay Logs are Encrypted,The encrypt_binlog system variable may be used to configure encryption of the binary and relay logs. This may be configured to ON even if binary logging is not enabled in order to encrypt relay log files.,"[{'VARIABLE_NAME': 'INNODB_ENCRYPT_LOG', 'VARIABLE_VALUE': 'OFF', 'Note': 'BINLOG - At Rest Encryption'}]",FAIL,"[mariadb] 
... 
# Binary Log Encryption 
encrypt_binlog=ON"
7.1,Disable use of the mysql_old_password plugin,"The mysql_old_password plugin uses a cracked password routine with several flaws. It is present but not used by default in MariaDB. Steps should be taken to ensure that passwords will not be created with this plugin and that clients will not be able to authenticate to the MariaDB server using this plugin. The old_passwords system variable controls whether MariaDB server uses the mysql_old_password plugin (instead of the stronger mysql_native_password plugin) when creating passwords. The secure_auth system variable, when enabled, will block client connections that utilize the mysql_old_password plugin.","[{'VARIABLE_NAME': 'OLD_PASSWORDS', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'SECURE_AUTH', 'VARIABLE_VALUE': 'ON'}]",PASS,
7.3,Ensure strong authentication is utilized for all accounts,"The mysql_native_password and mysql_old_password plugins utilize weak cryptography and/or weak password routines. In particular, the mysql_old_password plugin utilizes cracked password routines and is subject to Pass-the-Hash attacks. The mysql_native_password plugin relies on the Secure Hash Algorithm 1 (SHA-1) algorithm. The National Institute of Standards and Technology (NIST) recommends against use of SHA-1. Additionally, these plugins allow users to set blank passwords, which allow authentication without providing a password. All users should be using alternative, stronger plugins or be configured with invalid passwords. See Default Value section and References for more details on specific account configurations.","[{'User': 'mariadb.sys', 'host': 'localhost'}, {'User': 'root', 'host': 'localhost'}, {'User': '', 'host': 'localhost'}, {'User': '', 'host': 'linux-vm'}, {'User': 'admin', 'host': 'localhost'}, {'User': 'rohinth', 'host': '%'}, {'User': 'root', 'host': '%'}]",FAIL,"If the root user is returned in the audit procedure results, set that account to utilize only 
the unix_socket plugin by running the following mariadb command: 
alter user 'root'@'localhost' identified via 'unix_socket'; 
If the mysql user is returned in the audit procedure results, set that account to use an 
invalid password by running the following mariadb command: 
set password for 'mysql'@'localhost' = 'invalid'; 
If the mariadb.sys user is returned in the audit procedure results, set that account to 
use an invalid password by running the following mariadb command: 
set password for 'mariadb.sys'@'localhost' = 'invalid'; 
For every other user identified by the audit procedure, use the ALTER USER command to 
configure the account to utilize one of the following authentication plugins as 
appropriate: 
• ed25519 
• gssapi 
• pam 
• unix_socket 
Notes: 
Some of these plugins will require installation if not already in use. Changing a user to 
utilize the ed25519 plugin but without providing a password will make the account 
inaccessible. For service accounts, set a new password in MariaDB and where the 
service account is used. For human user accounts, set a temporary password and notify 
the user to change the password immediately. 
If password validation plugins are already implemented, strict_password_validation 
may need to be temporarily disabled to reset mysql and mariadb.sys accounts to use 
invalid passwords. To do so, run set global strict_password_validation=0; before 
and set global strict_password_validation=1; after the set password commands."
7.4,Ensure Password Complexity Policies are in Place,"Passwords should be configured with a minimum length of 14 characters and should be checked against dictionaries of common, known, and expected passwords.","[{'PLUGIN_NAME': 'REPORT_PASSWORD', 'PLUGIN_STATUS': ''}, {'PLUGIN_NAME': 'MAX_PASSWORD_ERRORS', 'PLUGIN_STATUS': '4294967295'}, {'PLUGIN_NAME': 'DISCONNECT_ON_EXPIRED_PASSWORD', 'PLUGIN_STATUS': 'OFF'}, {'PLUGIN_NAME': 'STRICT_PASSWORD_VALIDATION', 'PLUGIN_STATUS': 'ON'}, {'PLUGIN_NAME': 'DEFAULT_PASSWORD_LIFETIME', 'PLUGIN_STATUS': '0'}, {'PLUGIN_NAME': 'OLD_PASSWORDS', 'PLUGIN_STATUS': 'OFF'}]",FAIL,"Install the password check plugins: 
INSTALL SONAME 'simple_password_check'; 
INSTALL SONAME 'cracklib_password_check'; 
Note A supporting linux distribution package may need to be installed before installing 
the cracklib plugin. Follow installation guidance on the Cracklib Password Check Plugin 
page in the References section. 
Add the following lines to MariaDB configuration files: 
plugin_load_add = simple_password_check 
simple_password_check = FORCE_PLUS_PERMANENT 
simple_password_check_minimal_length = 14 
plugin_load_add = cracklib_password_check 
cracklib_password_check = FORCE_PLUS_PERMANENT 
strict_password_validation = ON 
Consider customizing the password dictionary to include usernames of all MariaDB 
users and any other risky passwords patterns noted in the Audit Procedure. 
Set cracklib_password_check_dictionary if using a customized password dictionary."
7.5,Ensure No Users Have Wildcard Hostnames,"MariaDB can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to ''@'%'.","[{'user': 'rohinth', 'host': '%'}, {'user': 'root', 'host': '%'}]",FAIL,"Perform the following actions to remediate this setting: 
1. Enumerate all users returned after running the audit procedure. 
2. Either ALTER the user's host to be specific or DROP the user."
7.6,Ensure No Anonymous Accounts Exist,"Anonymous accounts are users with empty usernames (''). Anonymous accounts have no passwords, so anyone can use them to connect to the MariaDB server.","[{'user': '', 'host': 'linux-vm'}, {'user': '', 'host': 'localhost'}]",PASS,
8.1,Ensure 'require_secure_transport' is Set to 'ON' and 'have_ssl' is Set to 'YES',All network traffic must use SSL/TLS when traveling over untrusted networks.,"[{'VARIABLE_NAME': 'REQUIRE_SECURE_TRANSPORT', 'VARIABLE_VALUE': 'OFF'}, {'VARIABLE_NAME': 'HAVE_SSL', 'VARIABLE_VALUE': 'DISABLED'}]",FAIL,require_secure_transport=ON;
8.2,"Ensure 'ssl_type' is Set to 'ANY', 'X509', or 'SPECIFIED' for All Remote Users",All network traffic must use SSL/TLS when traveling over untrusted networks. SSL/TLS should be enforced on a per-user basis for users which enter the system through the network.,"[{'user': '', 'host': 'linux-vm', 'ssl_type': ''}, {'user': 'rohinth', 'host': '%', 'ssl_type': ''}, {'user': 'root', 'host': '%', 'ssl_type': ''}]",FAIL,"Use the ALTER USER statement to require the use of SSL/TLS: 
ALTER USER 'my_user'@'app1.example.com' REQUIRE SSL; 
Note: REQUIRE SSL only enforces TLS. There are additional options REQUIRE X509, 
REQUIRE ISSUER, REQUIRE SUBJECT and REQUIRE CIPHER which can be used to further 
restrict the connection."
