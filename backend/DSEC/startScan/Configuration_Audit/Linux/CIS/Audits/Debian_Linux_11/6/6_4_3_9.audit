audit_id: "6.4.3.9"
audit_name: "Ensure discretionary access control permission modification events are collected"
audit_script: """
{
#!/usr/bin/env bash

failures=()
expected=(
  "-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod"
  "-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod"
  "-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod"
  "-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod"
  "-a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod"
  "-a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod"
)

UID_MIN=$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)
if [ -z "$UID_MIN" ]; then
  echo -e "\n- Audit Result:\n ** ERROR **"
  echo " - Cannot determine UID_MIN from /etc/login.defs"
  exit 1
fi

# Check on-disk rules
ondisk=$(awk "/^ *-a *always,exit/ \
  &&/ -F *arch=b(32|64)/ \
  &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \
  &&/ -F *auid>=$UID_MIN/ \
  &&(/chmod/||/fchmod/||/fchmodat/||/chown/||/fchown/||/fchownat/||/lchown/||/setxattr/||/lsetxattr/||/fsetxattr/||/removexattr/||/lremovexattr/||/fremovexattr/) \
  &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)" /etc/audit/rules.d/*.rules 2>/dev/null)

# Check running configuration
if ! command -v auditctl &>/dev/null; then
  echo -e "\n- Audit Result:\n ** ERROR **"
  echo " - 'auditctl' not found. Auditd might not be installed."
  exit 1
fi

runtime=$(auditctl -l | awk "/^ *-a *always,exit/ \
  &&/ -F *arch=b(32|64)/ \
  &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \
  &&/ -F *auid>=$UID_MIN/ \
  &&(/chmod/||/fchmod/||/fchmodat/||/chown/||/fchown/||/fchownat/||/lchown/||/setxattr/||/lsetxattr/||/fsetxattr/||/removexattr/||/lremovexattr/||/fremovexattr/) \
  &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)" 2>/dev/null)

for rule in "${expected[@]}"; do
  grep -Fq -- "$rule" <<< "$ondisk" || failures+=(" - On-disk rule missing or incorrect: $rule")
  grep -Fq -- "$rule" <<< "$runtime" || failures+=(" - Active audit rule missing or incorrect: $rule")
done

# Output
if [ "${#failures[@]}" -eq 0 ]; then
  echo -e "\n- Audit Result:\n ** PASS **"
  echo " - All required syscall audit rules are present (on-disk and runtime)"
else
  echo -e "\n- Audit Result:\n ** FAIL **"
  printf '%s\n' "${failures[@]}"
fi

}
"""