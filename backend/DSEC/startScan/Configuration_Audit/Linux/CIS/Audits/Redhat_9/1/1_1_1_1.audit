audit_id: "1.1.1.1"
audit_name: "Ensure cramfs kernel module is not available"
audit_script: """
{
    # Clear variables
    l_output3=""
    l_dl=""

    # Unset arrays
    unset a_output
    unset a_output2

    # Set module name and type
    l_mod_name="cramfs"
    l_mod_type="fs"

    # Resolve module path
    l_mod_path="$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)"

    # Function to check module status
    f_module_chk() {
        l_dl="y"  # Avoid duplicate check
        a_showconfig=()

        # Gather modprobe config for the module
        while IFS= read -r l_showconfig; do
            a_showconfig+=("$l_showconfig")
        done < <(modprobe --showconfig | grep -P -- '\b(install|blacklist)\h+'"${l_mod_name//-/_}"'\b')

        # Check if module is currently loaded
        if ! lsmod | grep -q "$l_mod_name"; then
            a_output+=(" - kernel module: \"$l_mod_name\" is not loaded")
        else
            a_output2+=(" - kernel module: \"$l_mod_name\" is loaded")
        fi

        # Check if module is install-blocked (i.e., not loadable)
        if grep -Pq -- '\binstall\h+'"${l_mod_name//-/_}"'\h+\/bin\/(true|false)\b' <<< "${a_showconfig[*]}"; then
            a_output+=(" - kernel module: \"$l_mod_name\" is not loadable")
        else
            a_output2+=(" - kernel module: \"$l_mod_name\" is loadable")
        fi

        # Check if module is blacklisted
        if grep -Pq -- '\bblacklist\h+'"${l_mod_name//-/_}"'\b' <<< "${a_showconfig[*]}"; then
            a_output+=(" - kernel module: \"$l_mod_name\" is deny listed")
        else
            a_output2+=(" - kernel module: \"$l_mod_name\" is not deny listed")
        fi
    }

    # Check all module base directories
    for l_mod_base_directory in $l_mod_path; do
        mod_dir="$l_mod_base_directory/${l_mod_name//-//}"

        if [ -d "$mod_dir" ] && [ -n "$(ls -A "$mod_dir")" ]; then
            l_output3+="\n - \"$l_mod_base_directory\""

            # Adjust for overlay modules if necessary
            [[ "$l_mod_name" =~ overlay ]] && l_mod_name="${l_mod_name::-2}"

            # Call check function only once
            [ "$l_dl" != "y" ] && f_module_chk
        else
            a_output+=(" - kernel module: \"$l_mod_name\" doesn't exist in \"$l_mod_base_directory\"")
        fi
    done

    # Print module existence info
    if [ -n "$l_output3" ]; then
        echo -e "\n\n -- INFO --\n - module: \"$l_mod_name\" exists in:$l_output3"
    fi

    # Output audit results
    if [ "${#a_output2[@]}" -le 0 ]; then
        printf '%s\n' "" "- Audit Result:" " ** PASS **" "${a_output[@]}"
    else
        printf '%s\n' "" "- Audit Result:" " ** FAIL **" " - Reason(s) for audit failure:" "${a_output2[@]}"
        if [ "${#a_output[@]}" -gt 0 ]; then
            printf '%s\n' "- Correctly set:" "${a_output[@]}"
        fi
    fi
}
"""