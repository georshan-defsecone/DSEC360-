audit_id: "6.1.3"
audit_name: "Ensure cryptographic mechanisms are used to protect the integrity of audit tools"
audit_script: """
{
l_output="" l_output2="" l_output3=""
a_output=(); a_output2=(); a_output3=()
a_parlist=(); a_items=("p" "i" "n" "u" "g" "s" "b" "acl" "xattrs" "sha512")
a_audit_files=("auditctl" "auditd" "ausearch" "aureport" "autrace" "augenrules")
l_systemd_analyze="$(command -v systemd-analyze)"
l_aide_conf="$(whereis aide.conf | awk '{print $2}')"

# Collect valid audit tool paths
for tool in "${a_audit_files[@]}"; do
    if [ -f "/sbin/$tool" ] || [ -f "/usr/sbin/$tool" ]; then
        a_parlist+=("$tool")
    else
        a_output+=(" - Audit tool file \"$tool\" not found on the system.")
    fi
done

# Function: Check if all required rule options are present
f_parameter_chk() {
    for tool in "${a_parlist[@]}"; do
        if grep -Pq -- "\b$tool\b" <<< "${!A_out[*]}"; then
            for entry in "${!A_out[@]}"; do
                if grep -Pq -- "^\s*(/usr)?/sbin/$tool\b" <<< "$entry"; then
                    l_file="${A_out[$entry]}"
                    l_actual="$(readlink -f "$(grep -Po '/.*' <<< "$entry")")"
                    l_expected="/sbin/$tool"
                    [ "$l_actual" != "$l_expected" ] && \
                        a_output3+=(" - \"$tool\" should reference canonical path: \"$l_actual\" in: \"$l_file\"")
                    
                    a_missing=()
                    for opt in "${a_items[@]}"; do
                        grep -Pq "\b$opt\b" <<< "$entry" || a_missing+=("$opt")
                    done

                    if [ "${#a_missing[@]}" -eq 0 ]; then
                        a_output+=(" - Audit tool \"$tool\" is correctly configured in: \"$l_file\"")
                    else
                        a_output2+=(" - Missing options (${a_missing[*]}) for \"$tool\" in: \"$l_file\"")
                    fi
                fi
            done
        else
            a_output2+=(" - Audit tool \"$tool\" not found in any AIDE configuration file")
        fi
    done
}

# Function: Analyze AIDE configuration file
f_aide_conf() {
    if [ -f "$l_aide_conf" ]; then
        declare -A A_out
        while IFS= read -r line; do
            [[ "$line" =~ ^\s*#\s*/ ]] && l_file="${line//# /}"
            for tool in "${a_parlist[@]}"; do
                if grep -Pq -- "^\s*(/usr)?/sbin/$tool\b" <<< "$line"; then
                    A_out["$line"]="$l_file"
                fi
            done
        done < <("$l_systemd_analyze" cat-config "$l_aide_conf" | grep -Pio '^\s*([^#\n\r]+|#\s*/[^#\n\r\s]+\.conf\b)')
        
        if [ "${#A_out[@]}" -gt 0 ]; then
            f_parameter_chk
        else
            a_output2+=(" - No audit tool rules found in the AIDE configuration file")
        fi
    else
        a_output2+=(" - AIDE configuration file not found. Is AIDE installed?")
    fi
}

# Run config check only if tools are found
[ "${#a_parlist[@]}" -gt 0 ] && f_aide_conf

# Output results
if [ "${#a_output2[@]}" -eq 0 ]; then
    echo -e "\n- Audit Result:\n ** PASS **"
    printf '%s\n' "${a_output[@]}"
    [ "${#a_output3[@]}" -gt 0 ] && echo -e "\n ** WARNING **" && printf '%s\n' "${a_output3[@]}"
else
    echo -e "\n- Audit Result:\n ** FAIL **"
    echo -e " - Reasons for audit failure:"
    printf '%s\n' "${a_output2[@]}"
    [ "${#a_output3[@]}" -gt 0 ] && echo -e "\n ** WARNING **" && printf '%s\n' "${a_output3[@]}"
    [ "${#a_output[@]}" -gt 0 ] && echo -e "\n- Correctly set:" && printf '%s\n' "${a_output[@]}"
fi
}
"""